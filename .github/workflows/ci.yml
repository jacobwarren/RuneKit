name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SWIFT_VERSION: '6.1'

jobs:
  # Main build and test matrix across platforms
  build-and-test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
        include:
          - os: macos-latest
            cache-path: ~/Library/Caches/org.swift.swiftpm
          - os: ubuntu-latest
            cache-path: ~/.cache/org.swift.swiftpm
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: ${{ matrix.cache-path }}
        key: ${{ runner.os }}-spm-${{ hashFiles('Package.swift', 'Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Swift Version
      run: swift --version
      
    - name: Build Package (Debug)
      run: swift build -c debug

    - name: Build Package (Release)
      run: swift build -c release

    - name: Run Tests with Coverage
      run: swift test --enable-code-coverage

    - name: Verify CLI Executable
      run: swift run RuneCLI
      
    - name: Collect Coverage Data
      run: |
        # Find the test binary
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          TEST_BINARY=$(find .build/debug -name "*PackageTests.xctest" -type d | head -1)
          if [[ -n "$TEST_BINARY" ]]; then
            TEST_BINARY="$TEST_BINARY/Contents/MacOS/$(basename "$TEST_BINARY" .xctest)"
          fi
        else
          TEST_BINARY=$(find .build/debug -name "*PackageTests.xctest" -type f | head -1)
        fi

        # Generate coverage report if test binary exists
        if [[ -n "$TEST_BINARY" && -f "$TEST_BINARY" ]]; then
          echo "Found test binary: $TEST_BINARY"
          PROFDATA_FILE=".build/debug/codecov/default.profdata"
          if [[ -f "$PROFDATA_FILE" ]]; then
            echo "Generating coverage report..."
            if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
              xcrun llvm-cov export "$TEST_BINARY" \
                -instr-profile "$PROFDATA_FILE" \
                -format="lcov" > coverage.lcov
            else
              llvm-cov export "$TEST_BINARY" \
                -instr-profile "$PROFDATA_FILE" \
                -format="lcov" > coverage.lcov
            fi
            echo "Coverage report generated successfully"
          else
            echo "Warning: Profile data not found at $PROFDATA_FILE"
            echo "Available files in .build/debug/codecov/:"
            ls -la .build/debug/codecov/ || echo "codecov directory not found"
          fi
        else
          echo "Warning: Test binary not found"
          echo "Available files in .build/debug/:"
          ls -la .build/debug/
        fi

    - name: Upload Coverage to Codecov
      if: hashFiles('coverage.lcov') != ''
      uses: codecov/codecov-action@v4
      with:
        file: coverage.lcov
        flags: ${{ runner.os }}
        name: ${{ matrix.os }}
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
        
    - name: Install SwiftFormat
      run: brew install swiftformat
      
    - name: Install SwiftLint
      run: brew install swiftlint
      
    - name: Check SwiftFormat
      run: swiftformat --lint .
      
    - name: Check SwiftLint
      run: swiftlint lint --strict

  # Sanitizer builds for catching memory issues
  sanitizer-tests:
    name: Sanitizer Tests (${{ matrix.sanitizer }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sanitizer: [address, undefined, thread]
        include:
          - sanitizer: address
            flags: "-sanitize=address"
            env_vars: "ASAN_OPTIONS=detect_leaks=1:abort_on_error=1"
          - sanitizer: undefined
            flags: "-sanitize=undefined"
            env_vars: "UBSAN_OPTIONS=abort_on_error=1"
          - sanitizer: thread
            flags: "-sanitize=thread"
            env_vars: "TSAN_OPTIONS=abort_on_error=1"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ env.SWIFT_VERSION }}

    - name: Build with ${{ matrix.sanitizer }} Sanitizer
      run: swift build -c debug -Xswiftc ${{ matrix.flags }}
      env:
        ${{ matrix.env_vars }}

    - name: Test with ${{ matrix.sanitizer }} Sanitizer
      run: swift test -c debug -Xswiftc ${{ matrix.flags }}
      env:
        ${{ matrix.env_vars }}

    - name: Verify CLI with ${{ matrix.sanitizer }} Sanitizer
      run: swift run -c debug RuneCLI
      env:
        ${{ matrix.env_vars }}

  # Release build verification
  release-build:
    name: Release Build
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
        
    - name: Build Release
      run: swift build -c release
      
    - name: Test CLI Executable
      run: swift run -c release RuneCLI

  # All checks must pass
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, sanitizer-tests, release-build]
    if: always()
    
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.build-and-test.result }}" != "success" ]]; then
          echo "Build and test failed"
          exit 1
        fi
        if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "Code quality checks failed"
          exit 1
        fi
        if [[ "${{ needs.sanitizer-tests.result }}" != "success" ]]; then
          echo "Sanitizer tests failed"
          exit 1
        fi
        if [[ "${{ needs.release-build.result }}" != "success" ]]; then
          echo "Release build failed"
          exit 1
        fi
        echo "All checks passed!"
